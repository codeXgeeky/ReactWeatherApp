{"version":3,"sources":["components/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","date","icon","temp","min","max","humidity","pressure","description","brief","href","target","rel","api","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","get_WeatherIcon","weathericon","rangeId","obj","Date","toDateString","App","useState","query","setQuery","name","weather","setWeather","type","placeholder","onChange","e","value","onClick","fetch","then","res","json","result","main","sys","Math","round","temp_max","temp_min","sunrise","sunset","dt","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.98d8c27d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weather.component.css';\r\n\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"container text-light\">\r\n                <div className=\"cards pt-4\">\r\n                    <h1>{props.city}, {props.country}</h1>\r\n                    <h4 className=\"py-3\">Last Updated : {props.date}</h4>\r\n\r\n                    <h5 className=\"py-1\">\r\n                        <i className={`wi ${props.icon} display-1`}></i>\r\n                    </h5>\r\n                    <h1 className=\"py-4\">{props.temp}&deg;</h1>\r\n                    <h3>\r\n                        <span className=\"px-4\">{props.min}&deg;</span><span className=\"px-4\">{props.max}&deg;</span>\r\n\r\n                    </h3>\r\n                    <h4>\r\n                        <div>Humidity  : <span className=\"px-4\">{props.humidity}%</span></div>\r\n                        <div>Pressure : <span className=\"px-4\">{props.pressure} atm</span></div>\r\n                    </h4>\r\n                    <h5 className=\"py-3\">{props.description}<span><h6>{props.brief}</h6></span></h5>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"bg-light bottom-container footer-copyright text-center py-3\">\r\n\r\n                <a className=\"footer-link\" href=\"https://www.linkedin.com/in/sandeep-v-4b01551a4/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a>\r\n                <a className=\"footer-link\" href=\"https://github.com/sandeep-v1404\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\r\n                <a className=\"footer-link\" href=\"https://www.instagram.com/sandeep._.144/\" target=\"_blank\" rel=\"noopener noreferrer\">Instagram</a>\r\n                <p className=\"copyright\">Â© 2020 Sandeep V @coding.tech</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Weather;","import React, { useState } from \"react\";\r\nimport './App.css';\r\nimport Weather from \"./components/weather.component\";\r\nimport 'weather-icons/css/weather-icons.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst api = {\r\n  url: \"https://api.openweathermap.org/data/2.5/weather?units=metric&appid=c65082e510e9cbf36a5cae8041688105&q=\"\r\n}\r\nconst weatherIcon = {\r\n  Thunderstorm: \"wi-thunderstorm\",\r\n  Drizzle: \"wi-sleet\",\r\n  Rain: \"wi-storm-showers\",\r\n  Snow: \"wi-snow\",\r\n  Atmosphere: \"wi-fog\",\r\n  Clear: \"wi-day-sunny\",\r\n  Clouds: \"wi-day-fog\"\r\n};\r\nfunction get_WeatherIcon(weathericon, rangeId) {\r\n  switch (true) {\r\n    case rangeId >= 200 && rangeId < 232:\r\n      return weathericon.Thunderstorm;\r\n\r\n    case rangeId >= 300 && rangeId <= 321:\r\n      return weathericon.Drizzle;\r\n    case rangeId >= 500 && rangeId <= 521:\r\n      return weathericon.Rain;\r\n\r\n    case rangeId >= 600 && rangeId <= 622:\r\n      return weathericon.Snow;\r\n    case rangeId >= 701 && rangeId <= 781:\r\n      return weathericon.Atmosphere;\r\n    case rangeId === 800:\r\n      return weathericon.Clear;\r\n    case rangeId >= 801 && rangeId <= 804:\r\n      return weathericon.Clouds;\r\n    default:\r\n      return weathericon.Clouds;\r\n  }\r\n}\r\n\r\nfunction date(obj) {\r\n  const date = new Date(obj);\r\n  return date.toDateString();\r\n}\r\n\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({\r\n    name: \"City\"\r\n  });\r\n  const search = () => {\r\n    fetch(`${api.url}${query}`)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        setWeather(result)\r\n        setQuery(\"\");\r\n      });\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"jumbotron\">\r\n        <h3 className=\"display-4\">Weather App</h3>\r\n        <p className=\"lead\">A simple Web app which shows you weather by City Name.This uses OpenWeatherAPI made by ReactJS</p>\r\n      </div>\r\n      <input\r\n        name=\"city\"\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Search for a City..\"\r\n        onChange={e => setQuery(e.target.value)}\r\n        value={query}\r\n      />\r\n      <button className=\"btn btn-danger mt-4\" onClick={search}>Get Weather</button>\r\n      {(typeof weather.main != \"undefined\") ?\r\n        <Weather city={weather.name}\r\n          country={weather.sys.country}\r\n          temp={Math.round(weather.main.temp)}\r\n          description={weather.weather[0].main}\r\n          brief={weather.weather[0].description}\r\n          max={Math.round(weather.main.temp_max)}\r\n          min={Math.round(weather.main.temp_min)}\r\n          humidity={weather.main.humidity}\r\n          pressure={Math.round(weather.main.pressure / 1013.25)}\r\n          sunrise={date(weather.sys.sunrise * 1000)}\r\n          sunset={date(weather.sys.sunset * 1000)}\r\n          date={date(weather.dt * 1000)}\r\n          icon={get_WeatherIcon(weatherIcon, weather.weather[0].id)} /> : ('')\r\n      }\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}